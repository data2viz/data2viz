apply plugin: 'base'
apply plugin: 'maven-publish'
apply plugin: 'signing'


tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
}

static String propertyOrEnvOrNull(Project project, String key) {
    final String property = project.findProperty(key)
    if (property == null) return System.getenv(key)
    return property
}

afterEvaluate {
    publishing {

        String sonatypeUsername = propertyOrEnvOrNull(project, "sonatype_username")
        String sonatypePassword = propertyOrEnvOrNull(project, "sonatype_password")
        String repositoryId = System.getenv("sonatype_staging_repo_id")

        repositories {
            maven {
                name = "MavenCentralStaging"
                if (repositoryId == null) {
                    url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                } else {
                    url = uri("https://oss.sonatype.org/service/local/staging/deployByRepositoryId/$repositoryId/")
                }
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
            maven {
                name = "SonatypeSnapshots"
                url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
            if (project.hasProperty("d2v_service_app_id")) {
                maven {
                    name = "data2viz-public"
                    url = uri("https://maven.pkg.jetbrains.space/data2viz/p/maven/public")
                    credentials {
                        username = d2v_service_app_id
                        password = d2v_service_app_secret
                    }
                }
                maven {
                    name = "data2viz-dev"
                    url = uri("https://maven.pkg.jetbrains.space/data2viz/p/maven/dev")
                    credentials {
                        username = d2v_service_app_id
                        password = d2v_service_app_secret
                    }
                }
            }
        }

        publications {
            all { publication ->
                pom.withXml(configureMavenCentralMetadata)
                artifact(javadocJar)
                def type = publication.name
                switch (type) {
                    case 'kotlinMultiplatform':
                        publication.artifactId = "$project.name"
                        break
                    default:
                        publication.artifactId = "$project.name-$type"
                        break
                }
            }
        }

        signing {
            String keyId = propertyOrEnvOrNull(project, "GPG_key_id")
            String privateKey = propertyOrEnvOrNull(project, "GPG_private_key")
            if (privateKey != null) {
                useInMemoryPgpKeys(
                    keyId,
                    privateKey,
                    propertyOrEnvOrNull(project, "GPG_private_password")
                )
                sign(publishing.publications)
            }
        }
    }
}

project.ext.configureMavenCentralMetadata = { pom ->
    def root = asNode()
    root.appendNode('name', project.name)
    root.appendNode('description', "Data2viz ${project.name} library")
    root.appendNode('url', 'https://github.com/data2viz/data2viz')
    root.children().last() + pomConfig
}

project.ext.pomConfig = {
    licenses {
        license {
            name = "The Apache Software License, Version 2.0"
            url "https://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution = "repo"
        }
    }
    developers {
        developer {
            id = "Data2viz"
            name = "Data2viz team"
            organization = "Data2viz"
            organizationUrl = "https://data2viz.io"
        }
    }

    scm {
        url = "https://github.com/data2viz/data2viz"
    }
}
