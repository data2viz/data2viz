apply plugin: 'com.android.application'
apply plugin: 'kotlin-platform-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.novoda.android-command'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.novoda:gradle-android-command-plugin:2.0.1'
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "io.data2viz.data2canvas"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 3
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }
}


dependencies {
    implementation 'com.android.support:design:28.0.0-rc02'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(":color:d2v-color-common")
    compile project(":color:d2v-color-jvm")

    compile project(":scale:d2v-scale-common")
    compile project(":scale:d2v-scale-jvm")

    compile project(":shape:d2v-shape-common")
    compile project(":shape:d2v-shape-jvm")

    compile project(":timer:d2v-timer-common")
    compile project(":timer:d2v-timer-android")

    expectedBy project(":ex-force:ex-force-common")
    compile project(":force:d2v-force-common")
    compile project(":force:d2v-force-android")

    expectedBy project(":ex-geo:ex-geo-common")
    compile project(":geo:d2v-geo-common")
    compile project(":geo:d2v-geo-jvm")

    expectedBy project(":ex-line-of-sight:ex-line-of-sight-common")

    expectedBy project(":ex-chord:ex-chord-common")
    compile project(":chord:d2v-chord-common")
    compile project(":chord:d2v-chord-jvm")

    expectedBy project(":ex-events:ex-events-common")

    expectedBy project(":ex-sankey:ex-sankey-common")
    compile project(":sankey:d2v-sankey-common")
    compile project(":sankey:d2v-sankey-jvm")

    compile project(":viz:d2v-viz-android")

//    expectedBy project(":ex-chord:ex-chord-common")
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.1.2'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}


task generateImages(type: Exec) {
    commandLine android.getAdbExe(), 'shell', 'am', 'instrument', '-w', '-r', '-e', 'debug', 'false', '-e', 'class', 'io.data2viz.charting.RenderingOnDeviceTest', 'io.data2viz.data2canvas.test/android.support.test.runner.AndroidJUnitRunner'
}

afterEvaluate {
    tasks.generateImages.dependsOn compileDebugSources, installDebug
}

task syncRenderedImages(type: com.novoda.gradle.command.Files, dependsOn: generateImages) {

    script {
        def backupDir = mkdir('build/images')
        def deviceImageDir = '/storage/emulated/0/Android/data/io.data2viz.data2canvas/files/Pictures/data2canvas/'
        ls(deviceImageDir).eachLine { line ->
            if (line.endsWith(".png")) {
                def fileName = line.split()[7]
                println "Pulling $fileName"
                pull deviceImageDir + fileName, backupDir.path
            }
        }
    }
}

apply plugin: 'kotlin-android'
