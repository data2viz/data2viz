allprojects {
    group = 'io.data2viz'
    repositories {
        google()
    }
}

buildscript {

    repositories {
        google()
        jcenter()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.kordamp.gradle:stats-gradle-plugin:$stats_version"
    }
}

// Report Kotlin compiler version when building project
println("Using Kotlin compiler version: $org.jetbrains.kotlin.config.KotlinCompilerVersion.VERSION")

// --------------- Configure sub-projects with Kotlin sources ---------------

def sourceless = ['site']

static def moduleOf(project) {
    def projectName = project.name
    if (projectName.startsWith("d2v-")) {
        return projectName.substring(4, projectName.lastIndexOf('-'))
    } 
    else 
        return ""
}

static def platformOf(project) {
    if (project.name.endsWith("-android")) return "android"
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    if (project.name.endsWith("-jfx")) return "jfx"
    if (project.name.endsWith("-jvm")) return "jvm"
    return "example"
}

static def platformLib(base, platform) {
    if (platform == "jvm") return base
    return "$base-$platform"
}

configure(subprojects.findAll { !sourceless.contains(it.name) }) {

    def platform = platformOf(project)


    repositories {
        jcenter()
        mavenCentral()
    }
    
    apply plugin: 'com.jfrog.bintray'

    if (platform == "common") {
        apply plugin: 'kotlin-platform-common'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            testCompile project(":tests:d2v-tests-common")
        }
    }
    if ( platform == "js") {
        apply plugin: 'kotlin-platform-js'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            testCompile project(":tests:d2v-tests-common")
            testCompile project(":tests:d2v-tests-js")
        }
        compileKotlin2Js {
            kotlinOptions {
                metaInfo = true
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = 'umd'
                main = "call"
            }
        }
        compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }
    }
    if ( platform == "android") {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-platform-android'

        android {
            compileSdkVersion 28
            buildToolsVersion "27.0.3"
            defaultConfig {
                minSdkVersion 17
                targetSdkVersion 28
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }

            lintOptions {
                abortOnError false
            }
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation 'com.android.support:appcompat-v7:26.1.0'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

            testCompile project(":tests:d2v-tests-common")
            testCompile project(":tests:d2v-tests-jvm")
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile 'junit:junit:4.12'
        }

    }
    if (platform == 'jfx') {
        apply plugin: 'kotlin-platform-jvm'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile "org.testfx:testfx-core:$textfx_version"
            testCompile "org.testfx:testfx-junit:$textfx_version"
            testCompile project(":tests:d2v-tests-common")
            testCompile project(":tests:d2v-tests-jvm")
            testCompile 'junit:junit:4.12'
        }

        //for tornadoFx
        compileKotlin     { kotlinOptions.jvmTarget = 1.8 }
        compileTestKotlin { kotlinOptions.jvmTarget = 1.8 }

        test {
            jvmArgs "-noverify"
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }

    }
    if (platform == 'jvm') {
        apply plugin: 'kotlin-platform-jvm'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile "org.testfx:testfx-core:$textfx_version"
            testCompile "org.testfx:testfx-junit:$textfx_version"
            testCompile project(":tests:d2v-tests-common")
            testCompile project(":tests:d2v-tests-jvm")
            testCompile 'junit:junit:4.12'
        }

        test {
            jvmArgs "-noverify"
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }

    }
}

// --------------- Configure sub-projects that are published ---------------

configure(subprojects.findAll { it.name.startsWith('d2v-') }) {
    def platform = platformOf(project)
    if( platform == "jvm" || platform == "jfx"){
        apply from: rootProject.file('gradle/dokka.gradle')
    }

    apply plugin: 'org.kordamp.gradle.stats'
    apply from: rootProject.file('gradle/publish-bintray.gradle')


}

apply plugin: 'base'

task aggregateStatsReport(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {}
