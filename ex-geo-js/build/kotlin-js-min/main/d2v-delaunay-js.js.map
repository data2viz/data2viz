{"version":3,"file":"d2v-delaunay-js.js","sources":["../../../../../d2v-delaunay-common/src/main/kotlin/io/data2viz/delaunay/DelaunayCommon.kt","runtime/arrayUtils.kt","util/Preconditions.kt","kotlin/math.kt","../../../../src/main/kotlin/io/data2viz/delaunay/Delaunay.kt","org.w3c/org.khronos.webgl.kt"],"sourcesContent":["package io.data2viz.delaunay\n\nimport kotlin.math.abs\nimport kotlin.math.ceil\nimport kotlin.math.floor\nimport kotlin.math.sqrt\n\ndata class Point(val x: Double, val y: Double)\n\ninterface TypedUIntArray {\n    operator fun set(i: Int, value: Int)\n    fun subarray(start: Int, end: Int): TypedUIntArray\n    operator fun get(ar: Int): Int\n    val length: Int\n}\n\ninterface TypedIntArray {\n    operator fun set(i: Int, value: Int)\n    fun subarray(start: Int, end: Int): TypedIntArray\n    operator fun get(ar: Int): Int\n    val length: Int\n}\n\n//expect fun typedUIntArray(size:Int):TypedUIntArray\nexpect fun typedIntArray(size:Int): TypedIntArray\n\n\nclass Delaunator(points: Array<Array<Double>>) {\n\n    val getX = { point: Array<Double> -> point[0] }\n    val getY = { point: Array<Double> -> point[1] }\n\n    private val coords:Array<Double> =Array(points.size*2){.0}\n\n    private val _cx: Double\n    private var _cy: Double\n\n    /**\n     * ceil(sqrt(points.size))\n     */\n    private val _hashSize: Int\n\n    var hull: Node\n\n    private val _hash: Array<Node?>\n\n    var triangles: TypedIntArray\n\n    private var halfedges: TypedIntArray\n\n    private var trianglesLen: Int\n\n    init {\n        var minX = Double.POSITIVE_INFINITY\n        var minY = Double.POSITIVE_INFINITY\n        var maxX = Double.NEGATIVE_INFINITY\n        var maxY = Double.NEGATIVE_INFINITY\n\n        val ids = typedIntArray(points.size)\n\n        //points -> coords\n        // minX, minY, maxX, maxY\n        for (i in 0 until points.size) {\n            val p = points[i]\n            val x = getX(p)\n            val y = getY(p)\n            ids[i] = i\n            coords[2 * i] = x\n            coords[2 * i + 1] = y\n            if (x < minX) minX = x\n            if (y < minY) minY = y\n            if (x > maxX) maxX = x\n            if (y > maxY) maxY = y\n        }\n\n        val cx = (minX + maxX) / 2\n        val cy = (minY + maxY) / 2\n\n        var minDist = Double.POSITIVE_INFINITY\n\n        var i0: Int = -1\n        var i1: Int = -1\n        var i2: Int = -1\n\n        // pick a seed point close to the centroid\n        for (i in 0 until points.size) {\n            val d = dist(cx, cy, coords[2 * i], coords[2 * i + 1])\n            if (d < minDist) {\n                i0 = i\n                minDist = d\n            }\n        }\n\n        minDist = Double.POSITIVE_INFINITY\n\n        // find the point closest to the seed\n        for (i in 0 until points.size) {\n            if (i == i0) continue\n            val d = dist(\n                coords[2 * i0], coords[2 * i0 + 1],\n                coords[2 * i], coords[2 * i + 1])\n            if (d < minDist && d > 0) {\n                i1 = i\n                minDist = d\n            }\n        }\n\n        var minRadius = Double.POSITIVE_INFINITY\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (i in 0 until points.size) {\n            if (i == i0 || i == i1) continue\n\n            val r = circumradius(\n                coords[2 * i0], coords[2 * i0 + 1],\n                coords[2 * i1], coords[2 * i1 + 1],\n                coords[2 * i], coords[2 * i + 1]\n            )\n\n            if (r < minRadius) {\n                i2 = i\n                minRadius = r\n            }\n        }\n\n        require(minRadius != Double.POSITIVE_INFINITY) { \"No Delaunay triangulation exists for this input.\" }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (area(\n                coords[2 * i0], coords[2 * i0 + 1],\n                coords[2 * i1], coords[2 * i1 + 1],\n                coords[2 * i2], coords[2 * i2 + 1]\n            ) < 0\n        ) {\n\n            val tmp = i1\n            i1 = i2\n            i2 = tmp\n        }\n\n        val i0x = coords[2 * i0]; val i0y = coords[2 * i0 + 1]\n        val i1x = coords[2 * i1]; val i1y = coords[2 * i1 + 1]\n        val i2x = coords[2 * i2]; val i2y = coords[2 * i2 + 1]\n\n        val center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y)\n        _cx = center.x\n        _cy = center.y\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(ids, coords, 0, ids.length - 1, center.x, center.y)\n\n        // initialize a hash table for storing edges of the advancing convex hull\n        _hashSize = ceil(sqrt(points.size.toDouble())).toInt()\n        _hash = arrayOfNulls(_hashSize)\n\n        // initialize a circular doubly-linked list that will hold an advancing convex hull\n        hull = insertNode(coords, i0)\n        var e = hull\n        this.hashEdge(e)\n        e.t = 0\n        e = insertNode(coords, i1, e)\n        this.hashEdge(e)\n        e.t = 1\n        e = insertNode(coords, i2, e)\n        this.hashEdge(e)\n        e.t = 2\n\n        val maxTriangles = 2 * points.size - 5\n        val triangles = typedIntArray (maxTriangles * 3)\n        val halfedges = typedIntArray (maxTriangles * 3)\n        this.halfedges = halfedges\n        this.triangles = triangles\n\n        this.trianglesLen = 0\n\n        addTriangle(i0, i1, i2, -1, -1, -1)\n\n        var xp:Double = Double.NEGATIVE_INFINITY\n        var yp:Double = Double.NEGATIVE_INFINITY\n        var i: Int\n        var x: Double\n        var y: Double\n        for (k in 0 until ids.length) {\n            i = ids[k]\n            x = coords[2 * i]\n            y = coords[2 * i + 1]\n\n            // skip duplicate points\n            if (x == xp && y == yp) continue\n            xp = x\n            yp = y\n\n            // skip seed triangle points\n            if ((x == i0x && y == i0y) ||\n                (x == i1x && y == i1y) ||\n                (x == i2x && y == i2y)\n            ) continue\n\n            // find a visible edge on the convex hull using edge hash\n            val startKey = hashKey(x, y)\n            var key = startKey\n            var start:Node?\n            do {\n                start = _hash[key]\n                key = (key + 1) % this._hashSize\n            } while ((start == null || start.removed) && key != startKey)\n\n            e = start!!\n            while (area(x, y, e.x, e.y, e.next!!.x, e.next!!.y) >= 0) {\n                e = e.next!!\n                if (e === start) {\n                    throw Error (\"Something is wrong with the input points.\")\n                }\n            }\n\n            val walkBack = e === start\n\n            // add the first triangle from the point\n            var t = addTriangle(e.i, i, e.next!!.i, -1, -1, e.t)\n\n            e.t = t // keep track of boundary triangles on the hull\n            e = insertNode(coords, i, e)\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            e.t = legalize(t + 2)\n            if (e.prev!!.prev!!.t == halfedges[t + 1]) {\n                e.prev!!.prev!!.t = t + 2\n            }\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            var q = e.next\n            while (area(x, y, q!!.x, q.y, q.next!!.x, q.next!!.y) < 0) {\n                t = addTriangle(q.i, i, q.next!!.i, q.prev!!.t, -1, q.t)\n                q.prev!!.t = legalize(t + 2)\n                this.hull = q.removeNode()!!\n                q = q.next\n            }\n\n            if (walkBack) {\n                // walk backward from the other side, adding more triangles and flipping\n                q = e.prev\n                while (area(x, y, q!!.prev!!.x, q.prev!!.y, q.x, q.y) < 0) {\n                    t = this.addTriangle(q.prev!!.i, i, q.i, -1, q.t, q.prev!!.t)\n                    this.legalize(t + 2)\n                    q.prev!!.t = t\n                    this.hull = q.removeNode()!!\n                    q = q.prev\n                }\n            }\n\n            // save the two new edges in the hash table\n            hashEdge(e)\n            hashEdge(e.prev!!)\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = triangles.subarray(0, this.trianglesLen)\n        this.halfedges = halfedges.subarray(0, this.trianglesLen)\n    }\n\n\n    private fun hashEdge(e: Node) {\n        this._hash[hashKey(e.x, e.y)] = e\n    }\n\n    private fun hashKey(x: Double, y: Double):Int {\n        val dx = x - _cx\n        val dy = y - _cy\n        // use pseudo-angle: a measure that monotonically increases\n        // with real angle, but doesn't require expensive trigonometry\n        val p: Double = 1 - dx / (abs(dx) + abs(dy))\n        return floor((2.0 + if (dy < 0) -p else p) / 4 * this._hashSize).toInt()\n    }\n\n    private fun legalize(a: Int): Int {\n        val triangles = this.triangles\n        val coords = this.coords\n        val halfedges = this.halfedges\n        val b = halfedges[a]\n        val a0 = a - a % 3\n        val b0 = b - b % 3\n\n        val al = a0 + (a + 1) % 3\n        val ar = a0 + (a + 2) % 3\n        val bl = b0 + (b + 2) % 3\n\n        val p0 = triangles[ar]\n        val pr = triangles[a]\n        val pl = triangles[al]\n        val p1 = triangles[bl]\n\n        val illegal = inCircle(\n            coords[2 * p0], coords[2 * p0 + 1],\n            coords[2 * pr], coords[2 * pr + 1],\n            coords[2 * pl], coords[2 * pl + 1],\n            coords[2 * p1], coords[2 * p1 + 1]\n        )\n\n        if (illegal) {\n            triangles[a] = p1\n            triangles[b] = p0\n\n            link(a, halfedges[bl])\n            link(b, halfedges[ar])\n            link(ar, bl)\n\n            val br = b0 + (b + 1) % 3\n\n            legalize(a)\n            return legalize(br)\n        }\n\n        return ar\n    }\n\n    private fun link(a:Int, b:Int) {\n        this.halfedges[a] = b\n        if (b != -1) this.halfedges[b] = a\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    private fun addTriangle(i0:Int, i1:Int, i2:Int, a:Int, b:Int, c:Int): Int {\n        val t = this.trianglesLen\n\n        this.triangles[t] = i0\n        this.triangles[t + 1] = i1\n        this.triangles[t + 2] = i2\n\n        link(t, a)\n        link(t + 1, b)\n        link(t + 2, c)\n\n        this.trianglesLen += 3\n\n        return t\n    }\n}\n\n\n/**\n * Circular Double Linked List\n */\nclass Node(\n    val i: Int,\n    val x: Double,\n    val y: Double,\n    var t: Int,\n    var prev: Node?,\n    var next: Node?,\n    var removed: Boolean\n) {\n\n    fun removeNode(): Node? {\n        prev?.next = next\n        next?.prev = prev\n        removed = true\n        return prev\n    }\n\n}\n\n\n// create a new node in a doubly linked list\ninternal fun insertNode(coords: Array<Double>, i: Int, prev: Node? = null): Node {\n    val node = Node(i, coords[2 * i], coords[2 * i + 1], 0, null, null, false)\n\n    if (prev == null) {\n        node.prev = node\n        node.next = node\n\n    } else {\n        node.next = prev.next\n        node.prev = prev\n        prev.next?.prev = node\n        prev.next = node\n    }\n    return node\n}\n\n\nfun area(ax: Double, ay: Double, bx: Double, by: Double, cx: Double, cy: Double) =\n    (by - ay) * (cx - bx) - (bx - ax) * (cy - by)\n\n\nfun inCircle(ax: Double, ay: Double,\n             bx: Double, by: Double,\n             cx: Double, cy: Double,\n             px: Double, py: Double): Boolean {\n    val pax = ax - px\n    val pay = ay - py\n    val pbx = bx - px\n    val pby = by - py\n    val pcx = cx - px\n    val pcy = cy - py\n\n    val ap = pax * pax + pay * pay\n    val bp = pbx * pbx + pby * pby\n    val cp = pcx * pcx + pcy * pcy\n\n    return pax * (pby * cp - bp * pcy) -\n            pay * (pbx * cp - bp * pcx) +\n            ap * (pbx * pcy - pby * pcx) < 0\n}\n\nfun circumradius(\n    ax: Double, ay: Double,\n    bx: Double, by: Double,\n    cx: Double, cy: Double): Double {\n\n    val abx = bx - ax\n    val aby = by - ay\n    val acx = cx - ax\n    val acy = cy - ay\n\n    val bl = abx * abx + aby * aby\n    val cl = acx * acx + acy * acy\n\n    if (bl == 0.0 || cl == 0.0) return Double.POSITIVE_INFINITY\n\n    val d = abx * acy - aby * acx\n    if (d == 0.0) return Double.POSITIVE_INFINITY\n\n    val x = (acy * bl - aby * cl) * 0.5 / d\n    val y = (abx * cl - acx * bl) * 0.5 / d\n\n    return x * x + y * y\n}\n\nfun circumcenter(ax: Double, ay: Double, bx: Double, by: Double, cx: Double, cy: Double): Point {\n    val abx = bx - ax\n    val aby = by - ay\n    val acx = cx - ax\n    val acy = cy - ay\n\n    val bl = abx * abx + aby * aby\n    val cl = acx * acx + acy * acy\n\n    val d = abx * acy - aby * acx\n\n    val x = (acy * bl - aby * cl) * 0.5 / d\n    val y = (abx * cl - acx * bl) * 0.5 / d\n\n    return Point(\n        x = ax + x,\n        y = ay + y\n    )\n}\n\ninline fun Double?.isFalsy() = this == null || this == -0.0 || this == 0.0 || isNaN()\ninline fun Double?.orNull(): Double? = if (this.isFalsy()) null else this\n\n\nprivate inline fun compare(coords: Array<Double>, i: Int, j: Int, cx: Double, cy: Double): Double {\n    val d1: Double = dist(coords[2 * i], coords[2 * i + 1], cx, cy)\n    val d2: Double = dist(coords[2 * j], coords[2 * j + 1], cx, cy)\n    return (d1 - d2).orNull() ?: (coords[2 * i] - coords[2 * j]) ?: (coords[2 * i + 1] - coords[2 * j + 1])\n}\n\nfun quicksort(ids: TypedIntArray, coords: Array<Double>, left: Int, right: Int, cx: Double, cy: Double) {\n\n    var j: Int\n    var temp: Int\n\n    if (right - left <= 20) {\n        for (i in (left + 1)..right) {\n            temp = ids[i]\n            j = i - 1\n            while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0)\n                ids[j + 1] = ids[j--]\n            ids[j + 1] = temp\n        }\n    } else {\n        var i: Int = left + 1\n        val median = (0.5 * (left + right)).toInt()\n        j = right\n        swap(ids, median, i)\n        if (compare(coords, ids[left], ids[right], cx, cy) > 0) swap(ids, left, right)\n        if (compare(coords, ids[i], ids[right], cx, cy) > 0) swap(ids, i, right)\n        if (compare(coords, ids[left], ids[i], cx, cy) > 0) swap(ids, left, i)\n\n        temp = ids[i]\n        while (true) {\n            do {\n                i++\n            } while (compare(coords, ids[i], temp, cx, cy) < 0)\n\n            do {\n                j--\n            } while (compare(coords, ids[j], temp, cx, cy) > 0)\n\n            if (j < i) break\n            swap(ids, i, j)\n        }\n        ids[left + 1] = ids[j]\n        ids[j] = temp\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, coords, i, right, cx, cy)\n            quicksort(ids, coords, left, j - 1, cx, cy)\n        } else {\n            quicksort(ids, coords, left, j - 1, cx, cy)\n            quicksort(ids, coords, i, right, cx, cy)\n        }\n    }\n}\n\nfun dist(ax: Double, ay: Double, bx: Double, by: Double): Double {\n    val dx = ax - bx\n    val dy = ay - by\n    return dx * dx + dy * dy\n}\n\nprivate fun swap(arr:TypedIntArray, i: Int, j: Int) {\n    val tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n","@file:Suppress(\"NOTHING_TO_INLINE\")\n\npackage io.data2viz.delaunay\n\nimport org.khronos.webgl.Int32Array\nimport org.khronos.webgl.Uint32Array\nimport org.khronos.webgl.get\nimport org.khronos.webgl.set\n\n\n\n@JsName(\"delaunator\")\nfun delaunautor(points: Array<Array<Double>>) = Delaunator(points)\n\n\n//actual fun typedUIntArray(size:Int):TypedUIntArray = TypedUIntArrayDelegate(Uint32Array(size))\nactual fun typedIntArray(size:Int): TypedIntArray = TypedIntArrayDelegate(Int32Array(size))\n\nclass TypedUIntArrayDelegate(val delegate: Uint32Array):TypedUIntArray {\n    override val length: Int\n        get() = delegate.length\n\n    override fun set(i: Int, value: Int) {\n        delegate[i] = value\n    }\n    override fun subarray(start: Int, end: Int): TypedUIntArray = TypedUIntArrayDelegate(delegate.subarray(start, end))\n    override fun get(ar: Int): Int = delegate[ar]\n\n}\n\nclass TypedIntArrayDelegate(val delegate: Int32Array):TypedIntArray {\n    override val length: Int\n        get() = delegate.length\n\n    override fun set(i: Int, value: Int) {\n        delegate[i] = value\n    }\n    override fun subarray(start: Int, end: Int): TypedIntArray = TypedIntArrayDelegate(delegate.subarray(start, end))\n    override fun get(ar: Int): Int = delegate[ar]\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n\n    return o\n}\n\npublic external abstract class WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation {\n}\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int): Unit\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String): Unit\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?): Unit\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?): Unit\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun bindTexture(target: Int, texture: WebGLTexture?): Unit\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun blendEquation(mode: Int): Unit\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit\n    fun blendFunc(sfactor: Int, dfactor: Int): Unit\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit\n    fun bufferData(target: Int, size: Int, usage: Int): Unit\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int): Unit\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?): Unit\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int): Unit\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun clearDepth(depth: Float): Unit\n    fun clearStencil(s: Int): Unit\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit\n    fun compileShader(shader: WebGLShader?): Unit\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int): Unit\n    fun deleteBuffer(buffer: WebGLBuffer?): Unit\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?): Unit\n    fun deleteProgram(program: WebGLProgram?): Unit\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?): Unit\n    fun deleteShader(shader: WebGLShader?): Unit\n    fun deleteTexture(texture: WebGLTexture?): Unit\n    fun depthFunc(func: Int): Unit\n    fun depthMask(flag: Boolean): Unit\n    fun depthRange(zNear: Float, zFar: Float): Unit\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun disable(cap: Int): Unit\n    fun disableVertexAttribArray(index: Int): Unit\n    fun drawArrays(mode: Int, first: Int, count: Int): Unit\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int): Unit\n    fun enable(cap: Int): Unit\n    fun enableVertexAttribArray(index: Int): Unit\n    fun finish(): Unit\n    fun flush(): Unit\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int): Unit\n    fun frontFace(mode: Int): Unit\n    fun generateMipmap(target: Int): Unit\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int): Unit\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float): Unit\n    fun linkProgram(program: WebGLProgram?): Unit\n    fun pixelStorei(pname: Int, param: Int): Unit\n    fun polygonOffset(factor: Float, units: Float): Unit\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit\n    fun sampleCoverage(value: Float, invert: Boolean): Unit\n    fun scissor(x: Int, y: Int, width: Int, height: Int): Unit\n    fun shaderSource(shader: WebGLShader?, source: String): Unit\n    fun stencilFunc(func: Int, ref: Int, mask: Int): Unit\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit\n    fun stencilMask(mask: Int): Unit\n    fun stencilMaskSeparate(face: Int, mask: Int): Unit\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun texParameterf(target: Int, pname: Int, param: Float): Unit\n    fun texParameteri(target: Int, pname: Int, param: Int): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun uniform1f(location: WebGLUniformLocation?, x: Float): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform1i(location: WebGLUniformLocation?, x: Int): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun useProgram(program: WebGLProgram?): Unit\n    fun validateProgram(program: WebGLProgram?): Unit\n    fun vertexAttrib1f(index: Int, x: Float): Unit\n    fun vertexAttrib1fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit\n    fun vertexAttrib2fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit\n    fun vertexAttrib3fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit\n    fun vertexAttrib4fv(index: Int, values: dynamic): Unit\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int): Unit\n    fun viewport(x: Int, y: Int, width: Int, height: Int): Unit\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Float>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float32Array.set(index: Int, value: Float): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Double>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float64Array.set(index: Int, value: Double): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte): Unit\n    fun setUint8(byteOffset: Int, value: Byte): Unit\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally): Unit\n}\n\npublic external @marker interface BufferDataSource {\n}\n\npublic external @marker interface TexImageSource {\n}\n\n"],"names":[],"mappings":"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"}