{"version":3,"file":"kotlinx-coroutines-core.js","sources":["../../../../../../common/kotlinx-coroutines-core-common/src/Timeout.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/ArrayBroadcastChannel.kt","../../../../src/JSDispatcher.kt","../../../../../../common/kotlinx-coroutines-core-common/src/AbstractContinuation.kt","util/Preconditions.kt","../../../../../atomicfu-common/src/main/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","util/Standard.kt","../../../../../../common/kotlinx-coroutines-core-common/src/AbstractCoroutine.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Annotations.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Await.kt","generated/_Arrays.kt","../../../../../../../../../../dummy.kt","kotlin/collections.kt","generated/_Collections.kt","runtime/arrayUtils.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CancellableContinuation.kt","kotlin/coroutines/Continuation.kt","kotlin/Result.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Builders.common.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CompletableDeferred.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CompletedExceptionally.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CompletionHandler.common.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CoroutineDispatcher.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CoroutineExceptionHandler.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CoroutineName.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CoroutineScope.kt","../../../../../../common/kotlinx-coroutines-core-common/src/CoroutineStart.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Delay.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Dispatched.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Job.kt","generated/_Sequences.kt","../../../../../../common/kotlinx-coroutines-core-common/src/JobSupport.kt","../../../../src/internal/LinkedList.kt","text/StringBuilder.kt","../../../../../../common/kotlinx-coroutines-core-common/src/MainCoroutineDispatcher.kt","../../../../../../common/kotlinx-coroutines-core-common/src/NonCancellable.kt","../../../../../../common/kotlinx-coroutines-core-common/src/ResumeMode.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Supervisor.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Unconfined.kt","../../../../../../common/kotlinx-coroutines-core-common/src/Yield.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/AbstractChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/ArrayChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/Broadcast.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/BroadcastChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/Channel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/ChannelCoroutine.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/Channels.common.kt","collections/Maps.kt","collections/MutableCollections.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/ConflatedBroadcastChannel.kt","generated/_ArraysJs.kt","../../../../src/main/kotlin/kotlinx/atomicfu/AtomicFU.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/ConflatedChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/LinkedListChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/Produce.kt","../../../../../../common/kotlinx-coroutines-core-common/src/channels/RendezvousChannel.kt","../../../../../../common/kotlinx-coroutines-core-common/src/internal/ArrayQueue.kt","../../../../../../common/kotlinx-coroutines-core-common/src/internal/Atomic.kt","../../../../../../common/kotlinx-coroutines-core-common/src/internal/Scopes.kt","../../../../../../common/kotlinx-coroutines-core-common/src/internal/Symbol.kt","../../../../../../common/kotlinx-coroutines-core-common/src/intrinsics/Cancellable.kt","../../../../../../common/kotlinx-coroutines-core-common/src/intrinsics/Undispatched.kt","kotlin/coroutines/intrinsics/IntrinsicsJs.kt","../../../../../../common/kotlinx-coroutines-core-common/src/selects/Select.kt","../../../../src/Runnable.kt","../../../../../../common/kotlinx-coroutines-core-common/src/selects/SelectUnbiased.kt","collections/Collections.kt","../../../../../../common/kotlinx-coroutines-core-common/src/selects/WhileSelect.kt","../../../../../../common/kotlinx-coroutines-core-common/src/sync/Mutex.kt","../../../../src/CompletionHandler.kt","kotlin/jsTypeOf.kt","../../../../src/CoroutineContext.kt","../../../../src/CoroutineExceptionHandlerImpl.kt","../../../../src/Debug.kt","../../../../src/Dispatchers.kt","../../../../src/Exceptions.kt","../../../../src/Promise.kt","../../../../src/Window.kt","../../../../src/internal/ArrayCopy.kt","../../../../src/internal/Concurrent.kt","../../../../src/internal/CopyOnWriteList.kt","kotlin/kotlin.kt","../../../../src/internal/Synchronized.kt","../../../../src/internal/ThreadContext.kt","../../../../src/internal/ThreadLocal.kt"],"sourcesContent":[null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.*\nimport kotlin.text.*\nimport kotlin.comparisons.*\nimport kotlin.random.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.internal.InlineOnly\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n@library(\"arrayToString\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun arrayToString(array: Array<*>): String = definedExternally\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n\n    array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.*\nimport kotlin.text.*\nimport kotlin.comparisons.*\nimport kotlin.random.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmName\n\n/**\n * Interface representing a continuation after a suspension point that returns value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * Context of the coroutine that corresponds to this continuation.\n     */\n    // todo: shall we provide default impl with EmptyCoroutineContext?\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver only and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly public inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly public inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates [Continuation] instance with a given [context] and a given implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly public inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts coroutine without receiver and with result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts coroutine with receiver type [R] and result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Repeated invocation of any resume function produces [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [exception] as failure.\n         */\n        @InlineOnly public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result\n * if invocation was successful, catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated exception\n * if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onFailure] function is rethrown by this function.\n *\n * This function is shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when(val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the the result of [onSuccess] for encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onSuccess] or by [onFailure] function is rethrown by this function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when(val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [map] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T: R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when(val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T: R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when(val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on encapsulated exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.*\nimport kotlin.text.*\nimport kotlin.comparisons.*\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence of [IndexedValue] for each element of the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.*\nimport kotlin.text.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts unintercepted coroutine without receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the later case, the [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is invoker's responsibility to ensure that the proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the later case, the [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is invoker's responsibility to ensure that the proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is invoker's responsibility to ensure that the proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is invoker's responsibility to ensure that the proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.*\nimport kotlin.comparisons.compareValues\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)",null,null,null],"names":[],"mappings":"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gBACV,IAAI,eAAe,CAAC,GAAI,SAAxB,C;kBACI,kBAAoB,GAAI,2B;kBZrGhC,wBCyCQ,WAAO,cDzCW,WCyCX,CAAP,CDzCR,C;kBYsGQ,yBAAO,I;kBAAP,2B;;gBAGJ,yBAAO,K;;;cAfC,IAAI,uBAAJ,C;gBA2Ba,Y;gBACjB,iBZtHR,oBCyCQ,WAAO,wBAAP,CDzCR,C;;cYWQ,OAAO,IAAP,C;gBACoC,OApB3B,SAoBqB,MAAM,oB;gBAAhB,iB;kBAAuC,+B;;gBAAvD,gBAAgB,I;gBAChB,SAAU,M;;;;cAEhB,gC;gBAvBW,SA4BC,MAAM,Q;gBAChB,MAAM,2BAAkB,yEAAlB,EAA6F,CAA7F,C;;;gBAbV,O;;;cAhBa,SA+BT,YAAqB,K;;;;UA9BlB,K;;;;IAsGX,C;GAfA,C;+JAiBA,yB;IAAA,kC;IZvGJ,iC;IC2CQ,uD;IW4DJ,mB;MAEI,UAAU,yBAAQ,OAAR,C;MACV,IAAI,eAAe,CAAC,GAAI,SAAxB,C;QACI,gBAAoB,GAAI,2B;QZrGhC,wBCyCQ,WAAO,cDzCW,SCyCX,CAAP,CDzCR,C;QYsGQ,OAAO,I;;MAGX,OAAO,K;IACX,C;GATA,C;iLAWA,yB;IAAA,6B;IAAA,sC;IAAA,uDAEkD,yB;MZ3HtD,iC;;QY2HsD,mB;UAC7B,gBAAb,wC;UAAa,YAAO,a;UZvH5B,6BC2CQ,WD3CkB,KC2ClB,CD3CR,C;UYwHI,W;QAF8C,C;MAAA,C;KAAA,C;IZ3HtD,iC;IYyHI,wB;MAEyB,Y;MACjB,iBZvHR,oBC2CQ,iBD3CR,C;IYyHA,C;GALA,C;+MAOA,yB;IAAA,6B;IAAA,sC;IAAA,oEAEkD,yB;MZ3HtD,iC;MC2CQ,uD;;QWgF8C,mB;UAC7B,gBAAb,wC;UAAa,gBAAoB,iB;UZtHzC,6BCyCQ,WAAO,cDzCW,SCyCX,CAAP,CDzCR,C;UYuHI,W;QAF8C,C;MAAA,C;KAAA,C;IZ3HtD,iC;IC2CQ,uD;IW8EJ,4B;MAEyB,Y;MACjB,iBZtHR,oBCyCQ,WAAO,wBAAP,CDzCR,C;IYwHA,C;GALA,C;;IASI,cAAc,iBAAa,Q;IAC3B,sBAAS,K;IACT,kBAAa,C;IACb,eAAW,uBAAc,OAAd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AF0B,C;;IAIe,aAAS,yBAAgB,QAAhB,C;EAAT,C;;IACgB,OAAA,QAAI,wBAAe,KAAf,C;EAAJ,C;;IACvB,wBAAc,aAAd,M;EAAA,C;;;;;;;IAOlC,6BAAuB,MAAvB,C;IADA,kB;EAF4B,C;;IAKxB,UAAM,oBAAW,UAAM,0CAAiC,QAAjC,CAAjB,C;EACV,C;;IAEI,8BAAoB,UAApB,M;EAAA,C;;;;;;;IGvxCwC,8B;EANhD,C;;;;;;;ICIA,8B;IAW+B,2CAAgC,qBAAhC,C;EAX/B,C;;;MAiB2C,W;IAAA,C;;;;MAOG,Y;IAAA,C;;;;MAOA,Y;IAAA,C;;;IAOV,Y;EAAA,C;;IAQ5B,MAAM,mCAA8B,2BAA9B,C;EACV,C;;;MAOY,MAAM,mCAA8B,2BAA9B,C;IAAN,C;;;IAOqD,MAAM,2BAAsB,2BAAtB,C;EAAN,C;;IAQ7D,wC;EAAA,C;;IAQA,wC;EAAA,C;;EASJ,C;;IAOkD,Y;EAAA,C;;;MAQtC,sB;IAAA,C;;;IAO6C,wC;EAAA,C;;;;;;;;IA5G7D,qC;MAAA,oB;;IAAA,8B;EAAA,C;;;;;;;ICK2C,qBAAQ,C;EAAR,C;;IACD,qBAAQ,CAAR,IAA+B,cAAQ,C;EAAvC,C;ERgJtC,yDAEkD,yB;IZ3HtD,iC;;MY2HsD,mB;QAC7B,gBAAb,wC;QAAa,YAAO,a;QZvH5B,6BC2CQ,WD3CkB,KC2ClB,CD3CR,C;QYwHI,W;MAF8C,C;IAAA,C;GAAA,C;;IQ/I5C,IAIoB,I;IAJ1B,QAAM,IAAN,C;WACI,C;QpBwBJ,6BC2CQ,WmBnE0B,KnBmE1B,CD3CR,C;QoBxBI,K;WACA,C;QAAoB,6BAAkB,KAAlB,C;QAApB,K;WACA,C;QAAe,wBAAa,KAAb,C;QAAf,K;WACA,C;QAAsD,YAAhC,2E;QR2ID,a;QACjB,kBZvHR,oBC2CQ,WmBhEqE,KnBgErE,CD3CR,C;QoBrBI,K;WACA,C;QAAA,K;chCsHyC,MAAM,2BAA8B,CgCrH/D,kBAAe,IhCqHgD,YAA9B,C;;EgCnHvD,C;ER4II,sEAEkD,yB;IZ3HtD,iC;IC2CQ,uD;;MWgF8C,mB;QAC7B,gBAAb,wC;QAAa,gBAAoB,iB;QZtHzC,6BCyCQ,WAAO,cDzCW,SCyCX,CAAP,CDzCR,C;QYuHI,W;MAF8C,C;IAAA,C;GAAA,C;;IQ3I5C,IAIoB,I;IAJ1B,QAAM,IAAN,C;WACI,C;QpBqBJ,6BCyCQ,WAAO,cmB9DgC,SnB8DhC,CAAP,CDzCR,C;QoBrBI,K;WACA,C;QAAoB,0CAA+B,SAA/B,C;QAApB,K;WACA,C;QAAe,qCAA0B,SAA1B,C;QAAf,K;WACA,C;QAAsD,YAAhC,2E;QRuID,a;QACjB,kBZtHR,oBCyCQ,WAAO,cmB3D2E,SnB2D3E,CAAP,CDzCR,C;QoBlBI,K;WACA,C;QAAA,K;chC2GyC,MAAM,2BAA8B,CgC1G/D,kBAAe,IhC0GgD,YAA9B,C;;EgCxGvD,C;;IAGI,QAAM,IAAN,C;WACI,C;QAAuB,sBpBE3B,oBC2CQ,WmB7CwC,KnB6CxC,CD3CR,C;QoBFI,K;WACA,C;QAAkC,kBAAd,sBAAc,EAAkB,KAAlB,C;QAAlC,K;WACA,C;QpBAJ,6BC2CQ,WmB3CkB,KnB2ClB,CD3CR,C;QoBAI,K;WACA,C;QAA0C,iB;QpBD9C,6BC2CQ,iBD3CR,C;QoBCI,K;WACA,C;QAAA,K;chCgGyC,MAAM,2BAA8B,CgC/F/D,kBAAe,IhC+FgD,YAA9B,C;;EgC7FvD,C;;IAGI,QAAM,IAAN,C;WACI,C;QAAuB,sBpBD3B,oBCyCQ,WAAO,cmBxC8C,SnBwC9C,CAAP,CDzCR,C;QoBCI,K;WACA,C;QAAkC,+BAAd,sBAAc,EAA+B,SAA/B,C;QAAlC,K;WACA,C;QpBHJ,6BCyCQ,WAAO,cmBtCwB,SnBsCxB,CAAP,CDzCR,C;QoBGI,K;WACA,C;QAA0C,iB;QpBJ9C,6BCyCQ,WAAO,wBAAP,CDzCR,C;QoBII,K;WACA,C;QAAA,K;chCqFyC,MAAM,2BAA8B,CgCpF/D,kBAAe,IhCoFgD,YAA9B,C;;EgClFvD,C;;IC9ByB,sB;MAAA,SAAe,I;IAAc,6BAAkB,MAAlB,C;EAAA,C;;IAaZ,wB;MAClC,gBAAgB,wBAAoB,KAAM,QAA1B,EAAmC,KAAnC,C;MAAhB,OACU,0BAAV,SAAU,EAA0B,SAA1B,EAAqC,aAArC,C;IAFwB,C;EAAA,C;;IAAtC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;gBAAA,kBnCjmBlB,mB;qBmCimBkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCjmBlB,mB;qBmCimBkB,mB;YAAA,Q;;2BAAA,a;YACD,gB;4BAAA,6BAAU,YAAV,O;gBAAA,kBnClmBjB,mB;qBmCkmBiB,mB;YAAA,Q;;YAAL,IAAI,CAAC,aAAL,C;cACI,gB;8BAAA,gCAAK,YAAL,O;kBAAA,kBnCnmBhB,mB;uBmCmmBgB,mB;cAAA,Q;;;cADJ,gB;;;;;YAEI,gB;;;YAHR,gB;;;YAMU,wD;YAAV,iB;;;YAAU,iB;4BAAA,+B;gBAAA,kBnCvmBlB,mB;qBmCumBkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,iB;;;;cAAA,iB;;;;;YAAU,iB;4BAAA,4B;gBAAA,kBnCvmBlB,mB;qBmCumBkB,mB;YAAA,Q;;YAAA,uB;YACN,iB;4BAAA,gCAAK,GAAL,O;gBAAA,kBnCxmBZ,mB;qBmCwmBY,mB;YAAA,Q;;YADJ,iB;;;YAGJ,W;;;;;;;;;;;;;;;;EAAA,C;;IAXuC,uB;MAAA,UAA4B,yBAAY,W;IAC/E,OAAY,UAAZ,yBAAY,EAAQ,OAAR,UAAgC,mBAAhC,EAA4C,sCAA5C,C;EAAZ,C;;IAwBwD,yD;qBAAA,kG;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,kD;IAAA,wB;IAAA,qB;IAAA,kC;EAIxD,C;;;;;;;;;;;;;YAHc,mD;YAAV,gB;;;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCznBlB,mB;qBmCynBkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCznBlB,mB;qBmCynBkB,mB;YAAA,Q;;2BAAA,a;YACF,gB;4BAAA,6BAAU,YAAV,O;gBAAA,kBnC1nBhB,mB;qBmC0nBgB,mB;YAAA,Q;;YAAJ,IAAI,aAAJ,C;cAAkB,gB;8BAAA,gCAAK,YAAL,O;kBAAA,kBnC1nB9B,mB;uBmC0nB8B,mB;cAAA,Q;;;cAAlB,gB;;;;;YAAA,gB;;;YADJ,gB;;;YAGJ,W;;;;;;;;;;;;;;;;EAAA,C;;IALoC,uB;MAAA,UAA4B,yBAAY,W;IAC5E,OAAY,UAAZ,yBAAY,EAAQ,OAAR,UAAgC,mBAAhC,EAA4C,mCAA5C,C;EAAZ,C;;IAoBwD,yD;qBAAA,gH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oD;IAAA,kD;IAAA,wB;IAAA,yB;IAAA,qB;IAAA,kC;EAKxD,C;;;;;;;;;;;;;gBAFsB,I;+BAFN,C;YACF,0D;YAAV,gB;;;;;YAAU,gB;4BAAA,6B;gBAAA,kBnC9oBlB,mB;qBmC8oBkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnC9oBlB,mB;qBmC8oBkB,mB;YAAA,Q;;2BAAA,a;YACF,gB;4BAAA,8BAAU,uBAAV,EAAU,+BAAV,SAAmB,YAAnB,O;gBAAA,kBnC/oBhB,mB;qBmC+oBgB,mB;YAAA,Q;;YAAJ,IAAI,aAAJ,C;cAA2B,gB;8BAAA,gCAAK,YAAL,O;kBAAA,kBnC/oBvC,mB;uBmC+oBuC,mB;cAAA,Q;;;cAA3B,gB;;;;;YAAA,gB;;;YADJ,gB;;;YAGJ,W;;;;;;;;;;;;;;;;EAAA,C;;IAN2C,uB;MAAA,UAA4B,yBAAY,W;IACnF,OAAY,UAAZ,yBAAY,EAAQ,OAAR,UAAgC,mBAAhC,EAA4C,0CAA5C,C;EAAZ,C;;mBAOJ,8E;QAAA,S;aAAA,Q;;aAAA,uB;EAiBA,C;;IAjBA,sC;IAAA,yB;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAiBA,C;;;;;;;;;;;;;mCA/gBgB,C;+BA3CY,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAgBU,Q;YAApB,QAAO,kBAAa,yBAAb,EAAa,iCAAb,SAhBgB,GAgBhB,C;YAygBU,IAAC,sBAAD;cAAQ,wB;YACzB,IAAI,qBAAU,KAAV,EAAiB,OAAjB,CAAJ,C;cAA2C,iCAAI,OAAJ,C;YA1hB3C,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA6hBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;sGAjBA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IAzgBA,8D;IAjDA,qB;IA0jBA,kE;MA9fI,gBAAY,CAAZ,C;MA3CA,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAgBU,U;UAApB,QAAO,uBAAa,gBAAb,EAAa,wBAAb,WAhBgB,CAgBhB,C;UAygBU,IAAC,wBAAD;YAAQ,wB;UACzB,IAAI,UAAU,OAAV,EAAiB,OAAjB,CAAJ,C;YAA2C,sBAAI,OAAJ,C;;;;QApjB7C,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA6hBA,OAAO,W;IACX,C;GAjBA,C;;mBAmBA,gF;QAAA,S;aAAA,Q;;aAAA,uB;EAiBA,C;;IAjBA,sC;IAAA,0B;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAiBA,C;;;;;;;;;;;;;mCAliBgB,C;+BA3CY,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAgBU,Q;YAApB,QAAO,kBAAa,yBAAb,EAAa,iCAAb,SAhBgB,GAgBhB,C;YA4hBU,IAAC,sBAAD;cAAQ,wB;YACzB,IAAI,qBAAU,KAAV,EAAiB,OAAjB,CAAJ,C;cAA2C,gB;8BAAA,kCAAK,OAAL,O;kBAAA,kBnCprBnD,mB;uBmCorBmD,mB;cAAA,Q;;;cAA3C,gB;;;;;YAAA,gB;;;YA7iBA,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAgjBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;sGAjBA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IA5hBA,8D;IAjDA,qB;IA6kBA,kE;MAjhBI,gBAAY,CAAZ,C;MA3CA,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAgBU,U;UAApB,QAAO,uBAAa,gBAAb,EAAa,wBAAb,WAhBgB,CAgBhB,C;UA4hBU,IAAC,wBAAD;YAAQ,wB;UACzB,IAAI,UAAU,OAAV,EAAiB,OAAjB,CAAJ,C;YAA2C,0CAAK,OAAL,8B;;;;;QAvkB7C,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAgjBA,OAAO,W;IACX,C;GAjBA,C;;IA+BoB,kD;qBAAA,yE;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,oB;EAAiB,C;;;;;;;;;;;;;YAAd,gB;4BAAA,6BAAU,aAAV,O;gBAAA,kBnCrsBvB,mB;qBmCqsBuB,mB;YAAA,Q;;;;YAAD,QAAC,a;;;;;;;;;;;;;;;;EAAc,C;;IADM,uB;MAAA,UAA4B,yBAAY,W;IAC/E,yBAAO,OAAP,EAAgB,2BAAhB,C;EAAA,C;;mBAcO,wD;QAAA,S;aAAA,Q;;aAAA,uB;EAAa,C;;IAAb,wC;IAAA,yB;IAAA,oB;EAAa,C;;;;;;;;;;;;;YAAX,4B;;;;;;;;;;;;;;;;;;EAAW,C;;IAApB,Q;IAAA,sDAAO,oBAAP,sC;EAAA,C;;mBAEJ,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,wC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,sC;EAeA,C;;;;;;;;;;;;;+BA1nB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA0lBV,IA1lBuB,GA0lBnB,QAAJ,C;cAA4B,iCA1lBL,GA0lBK,C;YA1lB5B,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA6lBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;;mBAEA,2E;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,wC;IAAA,0B;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,sC;EAeA,C;;;;;;;;;;;;;+BA3oB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA2mBV,IA3mBuB,GA2mBnB,QAAJ,C;cAA4B,gB;8BAAA,kCA3mBL,GA2mBK,O;kBAAA,kBnClvBpC,mB;uBmCkvBoC,mB;cAAA,Q;;;cAA5B,gB;;;;;YAAA,gB;;;YA3mBA,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA8mBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;;mBAEA,0E;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAeA,C;;;;;;;;;;;;;+BA5pB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA4nBV,IAAI,CAAC,qBA5nBkB,GA4nBlB,CAAL,C;cAAgC,iCA5nBT,GA4nBS,C;YA5nBhC,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA+nBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;kGAfA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IA9pBA,qB;IA8pBA,kE;MA7oBI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA4nBV,IAAI,CAAC,UA5nBkB,CA4nBlB,CAAL,C;YAAgC,sBA5nBT,CA4nBS,C;;;;QAtpBlC,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA+nBA,OAAO,W;IACX,C;GAfA,C;;mBAiBA,4E;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,sC;IAAA,0B;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAeA,C;;;;;;;;;;;;;+BA7qB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA6oBV,IAAI,CAAC,qBA7oBkB,GA6oBlB,CAAL,C;cAAgC,gB;8BAAA,kCA7oBT,GA6oBS,O;kBAAA,kBnCpxBxC,mB;uBmCoxBwC,mB;cAAA,Q;;;cAAhC,gB;;;;;YAAA,gB;;;YA7oBA,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAgpBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;kGAfA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IA/qBA,qB;IA+qBA,kE;MA9pBI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA6oBV,IAAI,CAAC,UA7oBkB,CA6oBlB,CAAL,C;YAAgC,0CA7oBT,CA6oBS,8B;;;;;QAvqBlC,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAgpBA,OAAO,W;IACX,C;GAfA,C;;mBAiBA,uE;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAeA,C;;;;;;;;;;;;;+BA9rB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA8pBV,IAAI,qBA9pBmB,GA8pBnB,CAAJ,C;cAA+B,iCA9pBR,GA8pBQ,C;YA9pB/B,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAiqBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;+FAfA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IAhsBA,qB;IAgsBA,kE;MA/qBI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA8pBV,IAAI,UA9pBmB,CA8pBnB,CAAJ,C;YAA+B,sBA9pBR,CA8pBQ,C;;;;QAxrBjC,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAiqBA,OAAO,W;IACX,C;GAfA,C;;mBAiBA,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,sC;IAAA,0B;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAeA,C;;;;;;;;;;;;;+BA/sB4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA+qBV,IAAI,qBA/qBmB,GA+qBnB,CAAJ,C;cAA+B,gB;8BAAA,kCA/qBR,GA+qBQ,O;kBAAA,kBnCtzBvC,mB;uBmCszBuC,mB;cAAA,Q;;;cAA/B,gB;;;;;YAAA,gB;;;YA/qBA,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAkrBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;+FAfA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IAjtBA,qB;IAitBA,kE;MAhsBI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA+qBV,IAAI,UA/qBmB,CA+qBnB,CAAJ,C;YAA+B,0CA/qBR,CA+qBQ,8B;;;;;QAzsBjC,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAkrBA,OAAO,W;IACX,C;GAfA,C;;IA4B4D,yD;qBAAA,sF;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kC;IAAA,kC;IAAA,wB;IAAA,6B;IAAA,kC;EAUxD,C;;;;;;;;;;;;;YATI,IAAI,yBAAK,CAAT,C;cAAY,M;;;cAAZ,gB;;;;;;;Y1CryBJ,IAAI,E0CsyBQ,wBAAK,C1CtyBb,CAAJ,C;cACI,c0CqyBkB,yE;c1CpyBlB,MAAM,8BAAyB,OAAQ,WAAjC,C;;;mC0CqyBe,oB;YACX,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnC10BlB,mB;qBmC00BkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnC10BlB,mB;qBmC00BkB,mB;YAAA,Q;;YAAA,uB;YACN,gB;4BAAA,gCAAK,GAAL,O;gBAAA,kBnC30BZ,mB;qBmC20BY,mB;YAAA,Q;;YACA,mD;YACA,IAAI,yBAAa,CAAjB,C;cACI,M;;;cADJ,gB;;;;;YAHJ,gB;;;YAMJ,W;;;;;;;;;;;;;;;;EAAA,C;;IAX0C,uB;MAAA,UAA4B,yBAAY,W;IAClF,OAAY,UAAZ,yBAAY,EAAQ,OAAR,UAAgC,mBAAhC,EAA4C,yBAA5C,C;EAAZ,C;;IAwBwD,yD;qBAAA,wG;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4C;IAAA,kD;IAAA,wB;IAAA,qB;IAAA,kC;EAKxD,C;;;;;;;;;;;;;YAJc,sD;YAAV,gB;;;;;YAAU,gB;4BAAA,6B;gBAAA,kBnC/1BlB,mB;qBmC+1BkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnC/1BlB,mB;qBmC+1BkB,mB;YAAA,Q;;2BAAA,a;YACD,gB;4BAAA,6BAAU,YAAV,O;gBAAA,kBnCh2BjB,mB;qBmCg2BiB,mB;YAAA,Q;;YAAL,IAAI,CAAC,aAAL,C;cAAmB,M;;;cAAnB,gB;;;;;YACA,gB;4BAAA,gCAAK,YAAL,O;gBAAA,kBnCj2BZ,mB;qBmCi2BY,mB;YAAA,Q;;YAFJ,gB;;;YAIJ,W;;;;;;;;;;;;;;;;EAAA,C;;IANuC,uB;MAAA,UAA4B,yBAAY,W;IAC/E,OAAY,UAAZ,yBAAY,EAAQ,OAAR,UAAgC,mBAAhC,EAA4C,sCAA5C,C;EAAZ,C;;mBAOJ,2D;QAAA,S;aAAA,Q;;aAAA,uB;EAgBI,C;;IAhBJ,sC;IAAA,yB;IAAA,+B;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,gC;EAgBI,C;;;;;;;;;;;;;qCAAY,oB;+BA3wBY,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA40BV,WA9FyB,oBA8FV,CA50BQ,GA40BR,C;YC5WnB,mCAAI,IAAK,MAAT,EAAgB,IAAK,OAArB,C;YDheI,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA+0BA,gBAAO,sB;YAhGP,oB;;;;;;;;;;;;;;;;;;EAAA,C;gGAhBJ,yB;IAAA,iF;IAAA,0D;IAAA,6E;IA+FA,6B;IA32BA,qB;IA4wBA,qD;MAgBI,kBAAY,oB;MA3wBZ,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA40BV,WA9FyB,SA8FV,CA50BQ,CA40BR,C;UC5WnB,wBAAI,IAAK,MAAT,EAAgB,IAAK,OAArB,C;;;;QD1fE,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA+0BA,0BAAO,WAAP,6B;MAhGA,yD;IAAA,C;GAhBJ,C;;mBAkBA,+D;QAAA,S;aAAA,Q;;aAAA,uB;EAgBI,C;;IAhBJ,sC;IAAA,yB;IAAA,+B;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;EAgBI,C;;;;;;;;;;;;;qCAAc,oB;+BA7xBU,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAmyBE,mCAnCe,sBAmCX,CAnyBO,GAmyBP,CAAJ,EAnyBW,GAmyBX,C;YAnyBZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAsyBA,gBAAO,sB;YArCP,oB;;;;;;;;;;;;;;;;;;EAAA,C;kGAhBJ,yB;IAAA,iF;IAAA,0D;IAAA,6E;IAmCA,6B;IAj0BA,qB;IA8xBA,uD;MAgBI,kBAAc,oB;MA7xBd,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAmyBE,wBAnCe,WAmCX,CAnyBO,CAmyBP,CAAJ,EAnyBW,CAmyBX,C;;;;QA7zBd,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAsyBA,0BAAO,WAAP,6B;MArCA,yD;IAAA,C;GAhBJ,C;;mBAkBA,iF;QAAA,S;aAAA,Q;;aAAA,uB;EAeI,C;;IAfJ,sC;IAAA,yB;IAAA,+B;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,0C;EAeI,C;;;;;;;;;;;;;qCAAc,oB;+BA9yBU,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAwzBE,mCAvCe,sBAuCX,CAxzBO,GAwzBP,CAAJ,EAvC4B,yBAuCP,CAxzBV,GAwzBU,CAArB,C;YAxzBZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA2zBA,gBAAO,sB;YAzCP,oB;;;;;;;;;;;;;;;;;;EAAA,C;kGAfJ,yB;IAAA,iF;IAAA,0D;IAAA,6E;IAsCA,6B;IAt1BA,qB;IAgzBA,uE;MAeI,kBAAc,oB;MA9yBd,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAwzBE,wBAvCe,WAuCX,CAxzBO,CAwzBP,CAAJ,EAvC4B,cAuCP,CAxzBV,CAwzBU,CAArB,C;;;;QAl1Bd,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA2zBA,0BAAO,WAAP,6B;MAzCA,yD;IAAA,C;GAfJ,C;;mBAiBA,8E;QAAA,S;aAAA,Q;;aAAA,uB;EAmBA,C;;IAnBA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,oC;EAmBA,C;;;;;;;;;;;;;+BAn0B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAmyBE,mCAAI,uBAnyBO,GAmyBP,CAAJ,EAnyBW,GAmyBX,C;YAnyBZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAsyBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;oGAnBA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IAj0BA,qB;IAi0BA,oE;MAhzBI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAmyBE,wBAAI,YAnyBO,CAmyBP,CAAJ,EAnyBW,CAmyBX,C;;;;QA7zBd,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MAsyBA,OAAO,W;IACX,C;GAnBA,C;;mBAqBA,gG;QAAA,S;aAAA,Q;;aAAA,uB;EAmBA,C;;IAnBA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,oC;IAAA,0C;EAmBA,C;;;;;;;;;;;;;+BAx1B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAwzBE,mCAAI,uBAxzBO,GAwzBP,CAAJ,EAAqB,0BAxzBV,GAwzBU,CAArB,C;YAxzBZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA2zBA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;oGAnBA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IAt1BA,qB;IAs1BA,oF;MAr0BI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAwzBE,wBAAI,YAxzBO,CAwzBP,CAAJ,EAAqB,eAxzBV,CAwzBU,CAArB,C;;;;QAl1Bd,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA2zBA,OAAO,W;IACX,C;GAnBA,C;;mBAqBA,0E;QAAA,S;aAAA,Q;;aAAA,uB;EAkBA,C;;IAlBA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,gC;EAkBA,C;;;;;;;;;;;;;+BA52B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA40BV,WAAe,qBA50BQ,GA40BR,C;YC5WnB,mCAAI,IAAK,MAAT,EAAgB,IAAK,OAArB,C;YDheI,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA+0BA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;kGAlBA,yB;IAAA,iF;IAAA,0D;IAAA,6B;IA32BA,qB;IA22BA,kE;MA11BI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UA40BV,WAAe,UA50BQ,CA40BR,C;UC5WnB,wBAAI,IAAK,MAAT,EAAgB,IAAK,OAArB,C;;;;QD1fE,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA+0BA,OAAO,W;IACX,C;GAlBA,C;;mBAoBA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAgBA,C;;IAhBA,wC;IAAA,0B;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,sC;EAgBA,C;;;;;;;;;;;;;+BA93B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA81BE,gB;4BAAA,kCA91BW,GA81BX,O;gBAAA,kBnCr+BpB,mB;qBmCq+BoB,mB;YAAA,Q;;YA91BZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAi2BA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;;mBAEA,sE;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,wC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,sC;EAeA,C;;;;;;;;;;;;;+BA/4B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YA+2BE,iCA/2BW,GA+2BX,C;YA/2BZ,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YAk3BA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;;IASI,OAAK,cAAL,SAAK,e;EAAL,C;;IAaA,0BAAM,oBAAN,e;EAAA,C;;mBAEJ,+D;QAAA,S;aAAA,Q;;aAAA,uB;EAeA,C;;IAfA,wC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,sC;EAeA,C;;;;;;;;;;;;;+BAt7B4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YCged,mCDhe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B;cC/0BvC,mCD+0BgC,GC/0BhC,EAAS,MAAT,C;cACA,a;;;cAEA,Y;;;YD40BA,WCj1BJ,I;YDk1BI,IAAK,WA3/BkB,GA2/BlB,C;YA3/BL,gB;;;;;;;;;;;YA1BF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;;cAJV,S;;YAMI,oCAAO,gBAAP,C;;;;YAqBJ,oB;YA8/BA,OAAO,sB;;;;;;;;;;;;;;;;;;EACX,C;gGApBA,yB;IAAA,iF;IAAA,0D;IAAA,oE;IAAA,6B;IAxhCA,qB;IAwhCA,oE;MAvgCI,YAAwB,I;;QA6BV,Q;QAAA,2B;QAAV,Y;UAAU,4D;UAAV,KAAU,kDAAV,C;YAAA,K;UAAU,yD;UAAA,0D;UAy/BV,UAAU,YAz/Ba,CAy/Bb,C;UCh1BP,U;UADP,YAAY,sBDk1BwB,GCl1BxB,C;UACL,IAAI,aAAJ,C;YACH,aDg1BuC,gB;YC/0BvC,wBD+0BgC,GC/0BhC,EAAS,MAAT,C;YACA,e;;;YAEA,c;;UD40BA,WCj1BJ,M;UDk1BI,IAAK,WA3/BkB,CA2/BlB,C;;;;QArhCP,kC;UACE,QAAQ,G;UACR,MAAM,G;;;UAJV,S;;;QAMI,yBAAO,KAAP,C;;MAqBJ,2D;MA8/BA,OAAO,W;IACX,C;GApBA,C;;mBAsBA,4F;QAAA,S;aAAA,Q;;aAAA,uB;EAqBA,C;;IArBA,sC;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,gC;IAAA,oC;IAAA,oC;IAAA,0C;EAqBA,C;;;;;;;;;;;;;+BAljC4B,I;;YA6BV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;;cAAA,gB;;;;;YAAU,gB;4BAAA,0B;gBAAA,kBnCvIlB,mB;qBmCuIkB,mB;YAAA,Q;;YAAA,uB;YAghCV,UAAU,uBAhhCa,GAghCb,C;YCv2BP,Q;YADP,YAAY,iCDy2BwB,GCz2BxB,C;YACL,IAAI,aAAJ,C;cACH,aDu2BuC,gB;cCt2BvC,mCDs2BgC,GCt2BhC,EAAS,MAAT,C;cACA,a;;;cAEA,Y;;;YDm2BA,WCx2BJ,I;YDy2BI,IAAK,WAAI,0BAl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cDzCW,SCyCX,CAAP,CDzCR,C;U6CWI,uB;;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEe,cAAO,4E;QA7BV,U7CMZ,oBC2CQ,WD3CkB,OC2ClB,CD3CR,C;;;;E6CDJ,C;;;MAgBgB,gB;;QAPwB,kB;QAQhC,OCfE,gCAAuC,KAAvC,C;;;QDgBJ,gC;UACa,gBAAoB,C;UAXvB,U7CCZ,oBCyCQ,WAAO,cDzCW,SCyCX,CAAP,CDzCR,C;U6CWI,uB;;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEe,cAAO,4E;QAhBV,U7CPZ,oBC2CQ,WD3CkB,OC2ClB,CD3CR,C;;;;E6CYJ,C;oBAEA,yB;I7CZA,iC;IC2CQ,uD;I4C/BR,oC;MACgB,UAQU,M;;QAPlB,c;;;QACF,gC;UACa,gBAAoB,C;UAA/B,U7CVJ,oBCyCQ,WAAO,cDzCW,SCyCX,CAAP,CDzCR,C;U6CWI,M;;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEe,cAAO,4E;QAAlB,U7CvBJ,oBC2CQ,WD3CkB,OC2ClB,CD3CR,C;;I6CyBJ,C;GAXA,C;;IAsBI,iC;IAKa,gB;;MACT,OCzCE,2BAAuC,KAAvC,C;;;MD0CJ,gC;QACE,kCAAuB,CAAvB,C;;;QAHS,O;;IAAb,iB;IAMI,eAAW,mBAAX,C;MAAkC,4B;SAClC,yCAAmB,MAAnB,EAA2B,CAA3B,E;MACI,IAAI,6CAAJ,C;QAAsC,MAAM,MAAO,M;;QAAW,e;;MAE1D,4B;IAdZ,a;EACJ,C;;IAGiB,UAKN,M;;MAJH,mB;;;MACF,gC;QACE,kCAAuB,CAAvB,C;;;QAHS,O;;IAAb,iB;IAMI,eAAW,mBAAX,C;MAAkC,4B;SAClC,yCAAmB,MAAnB,EAA2B,CAA3B,E;MACI,IAAI,6CAAJ,C;QAAsC,MAAM,MAAO,M;;QAAW,e;;MAE1D,4B;IALZ,a;EAOJ,C;;;;IE1DsF,+BAAO,IAAP,EAAa,KAAb,C;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0IlF,OAAsC,wBAAtC,c;EAAA,C;4FA1CJ,yB;IAAA,iF;IAAA,0D;IAAA,2E;IAAA,qB;;MA0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"}